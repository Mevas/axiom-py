name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*"

env:
  PYTHON_VERSION: "3.8"
  POETRY_VERSION: "1.1.12"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install poetry==${{ env.POETRY_VERSION }}
      - run: poetry install
      - run: poetry run black --check axiom tests
      - run: poetry run pylint -E axiom tests
  test-local:
    name: Test (Local)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: axiomhq/setup-axiom@v1
        id: axiom
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install poetry==${{ env.POETRY_VERSION }}
      - run: poetry install
      - run: poetry run pytest --log-cli-level info
        env:
          AXIOM_URL: ${{ steps.axiom.outputs.url }}
          AXIOM_TOKEN: ${{ steps.axiom.outputs.token }}
  test-staging:
    name: Test (Staging)
    runs-on: ubuntu-latest
    if: github.repository == 'axiomhq/axiom-py'
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install poetry==${{ env.POETRY_VERSION }}
      - run: poetry install
      - run: poetry run python -m pytest
        env:
          AXIOM_URL: ${{ secrets.TESTING_AZURE_1_STAGING_DEPLOYMENT_URL }}
          AXIOM_TOKEN: ${{ secrets.TESTING_AZURE_1_STAGING_ACCESS_TOKEN }}
          AXIOM_ORG_ID: ${{ secrets.AXIOM_ORG_ID }}
  publish:
    name: Publish on PyPi
    runs-on: ubuntu-latest
    if: github.repository == 'axiomhq/axiom-py' && startsWith(github.ref, 'refs/tags')
    needs:
      - test-local
      - test-staging
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install poetry==1.1.7
      - run: poetry publish --build -u __token__ -p "${{ secrets.PYPI_TOKEN }}"
